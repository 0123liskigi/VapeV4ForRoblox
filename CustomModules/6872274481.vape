-- Credits to Inf Yield & all the other scripts that helped me make bypasses
local GuiLibrary = shared.GuiLibrary
local players = game:GetService("Players")
local lplr = players.LocalPlayer
local workspace = game:GetService("Workspace")
local lighting = game:GetService("Lighting")
local cam = workspace.CurrentCamera
local targetinfo = shared.VapeTargetInfo
local uis = game:GetService("UserInputService")
local mouse = lplr:GetMouse()
local robloxfriends = {}
local bedwars = {}
local getfunctions

local function getItem(itemName)
	for i5, v5 in pairs(bedwars["getInventory"](lplr)["items"]) do
		if v5["itemType"] == itemName then
			return v5
		end
	end
	return nil
end

local function getwool()
	for i5, v5 in pairs(bedwars["getInventory"](lplr)["items"]) do
		if v5["itemType"]:match("wool") then
			return v5["itemType"]
		end
	end
	return "wool"
end

getfunctions = function()
	for i,v in pairs(getgc(true)) do
		if type(v) == "table" then
			if rawget(v, "blocksFolder") then
				bedwars["BlockController"] = v
			end
			if rawget(v, "ClientBlockEngine") then
				bedwars["BlockEngine"] = v["ClientBlockEngine"]
			end
			if rawget(v, "BlockPlacer") then
				bedwars["BlockController2"] = v["BlockPlacer"]
			end
			if rawget(v, "getInventory") then
				bedwars["getInventory"] = v["getInventory"]
			end
			if rawget(v, "Client") and bedwars["Client"] == nil then
				bedwars["Client"] = v.Client
			end
			if rawget(v, "ClientStore") and bedwars["ClientStore"] == nil then
				bedwars["ClientStore"] = v.ClientStore
			end
			if rawget(v, "VictorySection") then
				bedwars["VictoryScreen"] = v["VictorySection"]
			end
			if rawget(v, "launchProjectile") then
				bedwars["FireProjectile"] = ""
				bedwars["ProjectilePosition"] = v["getLaunchPosition"]
			    local bowtable1 = debug.getconstants(debug.getupvalues(v["launchProjectile"])[2])
			    for i3 = 1, #bowtable1 do
			        if tostring(bowtable1[i3]):match("-") or tostring(bowtable1[i3]):match("ProjectileLaunch") then
			            bedwars["FireProjectile"] = bowtable1[i3]
			        end
			    end
			end
			if rawget(v, "kbDirectionStrength") then
				bedwars["KnockbackTable"] = v
			end
			if rawget(v, "ShieldController") and getmetatable(rawget(v, "ShieldController")) then
				for i2,v2 in pairs(debug.getconstants(debug.getprotos(getmetatable(v["ShieldController"])["raiseShield"])[1])) do
					if tostring(v2):match("-") or tostring(v2):match("UseShield") then
						bedwars["raiseShield"] = function()
							game:GetService("ReplicatedStorage").rbxts_include.node_modules.net.out._NetManaged[tostring(v2)]:FireServer({
								["raised"] = true
							})
						end
					end
				end
			end
			if rawget(v, "performHeal") then
				for i2,v2 in pairs(debug.getconstants(v["performHeal"])) do
					if tostring(v2):match("-") or tostring(v2):match("PlayGuitar") then
						bedwars["GuitarRemote"] = v2
					end
				end
			end
			if rawget(v, "ViewmodelController") then
				bedwars["assetTable"] = debug.getupvalues(debug.getupvalues(getrawmetatable(v["ViewmodelController"])["playAnimation"])[1])[2]
			end
			if rawget(v, "SwordController") then
				bedwars["SwordController"] = v["SwordController"]
			end
			if rawget(v, "BalloonController") then
				bedwars["BalloonController"] = v["BalloonController"]
			end
			if rawget(v, "swingSwordAtMouse") then
				bedwars["SwingSword"] = v["swingSwordAtMouse"]
			end
			if rawget(v, "swingSwordInRegion") then
				bedwars["SwingSwordRegion"] = v["swingSwordInRegion"]
			end
			if rawget(v, "CombatConstant") then
				bedwars["CombatConstant"] = v["CombatConstant"]
			end
			if rawget(v, "attackEntity") then
				bedwars["attackEntity"] = v["attackEntity"]
			end
			if rawget(v, "requestSelfDamage") then
				bedwars["damageTable"] = v
			end
			if rawget(v, "GamePlayerUtil") then
				bedwars["PlayerUtil"] = v["GamePlayerUtil"]
			end
			for i2,v2 in pairs(v) do
				if tostring(i2):match("sprinting") and type(v2) == "boolean" then
					bedwars["sprintTable"] = v
				  end
			end
		end
	end

	if bedwars["assetTable"] and bedwars["PlayerUtil"] and bedwars["GuitarRemote"] and bedwars["BalloonController"] and bedwars["SwingSwordRegion"] and bedwars["CombatConstant"] and bedwars["SwingSword"] and bedwars["FireProjectile"] and bedwars["getInventory"] and bedwars["raiseShield"] and bedwars["BlockController"] and bedwars["BlockEngine"] and bedwars["BlockController2"] and bedwars["SwordController"] and bedwars["attackEntity"] and bedwars["damageTable"] and bedwars["sprintTable"] then
		repeat wait() until lplr.Team ~= nil
		bedwars["placeBlock"] = function(newpos)
			local blocktable = bedwars["BlockController2"].new(bedwars["BlockEngine"], getwool())
			if getmetatable(bedwars["BlockController"])["isAllowedPlacement"](bedwars["BlockController"], lplr, getwool(), Vector3.new(newpos.X / 3, newpos.Y / 3, newpos.Z / 3)) and getItem(getwool()) then
				bedwars["BlockController2"].placeBlock(blocktable, Vector3.new(newpos.X / 3, newpos.Y / 3, newpos.Z / 3))
			end
		end
		local injectionhandler = getscriptclosure(game.Players.LocalPlayer.PlayerScripts.TS.controllers.global.exploit["injection-controller"])
		for i,v in pairs(debug.getprotos(injectionhandler)) do
			debug.setproto(injectionhandler, i, function() end)
		end
	else
		wait(1)
	--	print(bedwars["assetTable"],bedwars["ZiplineRemote"],bedwars["HitProjectile"],bedwars["FireProjectile"],bedwars["getInventory"],bedwars["raiseShield"],bedwars["BlockController"],bedwars["BlockEngine"],bedwars["BlockController2"],bedwars["SwordController"],bedwars["attackEntity"],bedwars["damageTable"],bedwars["sprintTable"])
		getfunctions()
	end
end
getfunctions()
bedwars["breakBlock"] = function(pos)
    game:GetService("ReplicatedStorage").rbxts_include.node_modules.net.out._NetManaged.BreakBlock:InvokeServer({
        ["blockRef"] = {
            ["blockPosition"] = Vector3.new(math.floor(pos.X / 3), math.floor(pos.Y / 3), math.floor(pos.Z / 3))
        },
        ["hitPosition"] = pos,
        ["hitNormal"] = Vector3.new(1, 0, 0)
    })
end

local function friendCheck(plr)
	if not robloxfriends[plr.UserId] then
		if lplr:IsFriendsWith(plr.UserId) then
			table.insert(robloxfriends, plr.Name)
			robloxfriends[plr.UserId] = true
		end
	end
	return (GuiLibrary["ObjectsThatCanBeSaved"]["Use FriendsToggle"]["Api"]["Enabled"] and ((GuiLibrary["ObjectsThatCanBeSaved"]["Use Roblox FriendsToggle"]["Api"]["Enabled"] and table.find(robloxfriends, plr.Name) == nil) and table.find(GuiLibrary["FriendsObject"]["Friends"], plr.Name) == nil) or GuiLibrary["ObjectsThatCanBeSaved"]["Use FriendsToggle"]["Api"]["Enabled"] == false)
end

shared.vapeteamcheck = function(plr)
	return (GuiLibrary["ObjectsThatCanBeSaved"]["Teams by colorToggle"]["Api"]["Enabled"] and (bedwars["PlayerUtil"].getGamePlayer(lplr):getTeamId() ~= bedwars["PlayerUtil"].getGamePlayer(plr):getTeamId() or (lplr.Team == nil or #lplr.Team:GetPlayers() == #game:GetService("Players"):GetChildren())) or GuiLibrary["ObjectsThatCanBeSaved"]["Teams by colorToggle"]["Api"]["Enabled"] == false)
end

local function targetCheck(plr, check)
	return (check and plr.Character.Humanoid.Health > 0 and plr.Character:FindFirstChild("ForceField") == nil or check == false)
end

local function isAlive(plr)
	if plr then
		return plr and plr.Character and plr.Character.Parent ~= nil and plr.Character:FindFirstChild("HumanoidRootPart") and plr.Character:FindFirstChild("Head") and plr.Character:FindFirstChild("Humanoid")
	end
	return lplr and lplr.Character and lplr.Character.Parent ~= nil and lplr.Character:FindFirstChild("HumanoidRootPart") and lplr.Character:FindFirstChild("Head") and lplr.Character:FindFirstChild("Humanoid")
end

local function getEquipped()
	local type = ""
	local obj = (isAlive() and lplr.Character:FindFirstChild("HandInvItem") and lplr.Character.HandInvItem.Value or nil)
	if obj then
		if obj.Name:match("sword") then
			type = "sword"
		end
		if obj.Name:match("wool") then
			type = "block"
		end
		if obj.Name:match("bow") then
			type = "bow"
		end
	end
    return {["Object"] = obj, ["Type"] = type}
end

local function isPlayerTargetable(plr, target, friend, team)
    return plr ~= lplr and GuiLibrary["ObjectsThatCanBeSaved"]["PlayersToggle"]["Api"]["Enabled"] and plr and isAlive(plr) and targetCheck(plr, target) and ((team and plr.Team == lplr.Team) or (team == nil and shared.vapeteamcheck(plr)))
end

local function vischeck(pos, pos2, ignore)
	return not unpack(cam:GetPartsObscuringTarget({pos, pos2}, ignore))
end

local function GetAllNearestHumanoidToPosition(distance, amount, noteamcheck)
	local returnedplayer = {}
	local currentamount = 0
    if isAlive() then
        for i, v in pairs(players:GetChildren()) do
            if isPlayerTargetable(v, true, true, noteamcheck) and v.Character:FindFirstChild("HumanoidRootPart") and v.Character:FindFirstChild("Head") and currentamount < amount then
                local mag = (lplr.Character.HumanoidRootPart.Position - v.Character.HumanoidRootPart.Position).magnitude
                if mag <= distance then
                    table.insert(returnedplayer, v)
					currentamount = currentamount + 1
                end
            end
        end
	end
	return returnedplayer
end

local function GetNearestHumanoidToPosition(distance)
	local closest, returnedplayer = distance, nil
    if isAlive() then
        for i, v in pairs(players:GetChildren()) do
            if isPlayerTargetable(v, true, false) and v.Character:FindFirstChild("HumanoidRootPart") and v.Character:FindFirstChild("Head") then
                local mag = (lplr.Character.HumanoidRootPart.Position - v.Character.HumanoidRootPart.Position).magnitude
                if mag <= closest then
                    closest = mag
                    returnedplayer = v
                end
            end
        end
	end
	return returnedplayer
end

local function GetNearestHumanoidToMouse(distance, checkvis)
    local closest, returnedplayer = distance, nil
    if isAlive() then
        for i, v in pairs(players:GetChildren()) do
            if isPlayerTargetable(v, true, true) and v.Character:FindFirstChild("HumanoidRootPart") and v.Character:FindFirstChild("Head") and (checkvis == false or checkvis and (vischeck(v.Character, "Head") or vischeck(v.Character, "HumanoidRootPart"))) then
                local vec, vis = cam:WorldToScreenPoint(v.Character.HumanoidRootPart.Position)
                if vis then
                    local mag = (uis:GetMouseLocation() - Vector2.new(vec.X, vec.Y)).magnitude
                    if mag <= closest then
                        closest = mag
                        returnedplayer = v
                    end
                end
            end
        end
    end
    return returnedplayer
end

GuiLibrary["RemoveObject"]("AutoClickerOptionsButton")
local autoclickercps = {["GetRandomValue"] = function() return 1 end}
local autoclicker = {["Enabled"] = false}
local autoclickertick = tick()
autoclicker = GuiLibrary["ObjectsThatCanBeSaved"]["CombatWindow"]["Api"].CreateOptionsButton("AutoClicker", function()
	game:GetService("RunService"):BindToRenderStep("AutoClicker", 1, function() 
		if isAlive() and uis:IsMouseButtonPressed(0) and autoclickertick <= tick() and getEquipped()["Type"] == "sword" then
			bedwars["SwingSword"](bedwars["SwordController"])
			autoclickertick = tick() + (1 / autoclickercps["GetRandomValue"]()) * Random.new().NextNumber(Random.new(), 0.75, 1)
		end
	end)
end, function() game:GetService("RunService"):UnbindFromRenderStep("AutoClicker") end, true, function() return "" end, "Clicks for you")
autoclickercps = autoclicker.CreateTwoSlider("CPS", 1, 20, function(val) end, false, 8, 12)

GuiLibrary["RemoveObject"]("ReachOptionsButton")
local reachrange = {["Value"] = 1}
local oldreach1 = bedwars["CombatConstant"].RAYCAST_SWORD_CHARACTER_DISTANCE
local Reach = GuiLibrary["ObjectsThatCanBeSaved"]["CombatWindow"]["Api"].CreateOptionsButton("Reach", function()
	debug.setupvalue(bedwars["SwingSwordRegion"], 3, reachrange["Value"])
	bedwars["CombatConstant"].RAYCAST_SWORD_CHARACTER_DISTANCE = oldreach1 * (reachrange["Value"] / 3)
end, function() 
	debug.setupvalue(bedwars["SwingSwordRegion"], 3, 3)
	bedwars["CombatConstant"].RAYCAST_SWORD_CHARACTER_DISTANCE = oldreach1
end, true, function() return "" end, "Extends attack reach")
reachrange = Reach.CreateSlider("Range", 3, 6, function(val) 
	debug.setupvalue(bedwars["SwingSwordRegion"], 3, val)
	bedwars["CombatConstant"].RAYCAST_SWORD_CHARACTER_DISTANCE = oldreach1 * (val / 3)
end)

local velohorizontal = {["Value"] = 100}
local velovertical = {["Value"] = 100}
local oldhori = bedwars["KnockbackTable"]["kbDirectionStrength"]
local oldvert = bedwars["KnockbackTable"]["kbUpwardStrength"]
local Velocity = GuiLibrary["ObjectsThatCanBeSaved"]["CombatWindow"]["Api"].CreateOptionsButton("Velocity", function()
	bedwars["KnockbackTable"]["kbDirectionStrength"] = oldhori * (velohorizontal["Value"] / 100)
	bedwars["KnockbackTable"]["kbUpwardStrength"] = oldvert * (velovertical["Value"] / 100)
end, function() 
	bedwars["KnockbackTable"]["kbDirectionStrength"] = oldhori
	bedwars["KnockbackTable"]["kbUpwardStrength"] = oldvert
end, true, function() return "" end, "Reduces knockback taken")
velohorizontal = Velocity.CreateSlider("Horizontal", 0, 100, function(val) bedwars["KnockbackTable"]["kbDirectionStrength"] = oldhori * (val / 100) end, 100)
velovertical = Velocity.CreateSlider("Vertical", 0, 100, function(val) bedwars["KnockbackTable"]["kbUpwardStrength"] = oldvert * (val / 100) end, 100)

local Sprint = {["Enabled"] = false}
Sprint = GuiLibrary["ObjectsThatCanBeSaved"]["CombatWindow"]["Api"].CreateOptionsButton("Sprint", function()
	spawn(function()
		repeat
			wait()
			if bedwars["sprintTable"].sprinting == false then
				getmetatable(bedwars["sprintTable"])["startSprinting"](bedwars["sprintTable"])
			end
		until Sprint["Enabled"] == false
	end)
end, function() end, true, function() return "" end, "Sets your sprinting to true")

local function getScaffold(vec)
    return Vector3.new(math.floor((vec.X / 3) + 0.5) * 3, math.floor((vec.Y / 3) + 0.5) * 3, math.floor((vec.Z / 3) + 0.5) * 3) 
end

local function scaffoldBlock(newpos)
    bedwars["placeBlock"](newpos)
end

local autohealdelay = 0
local autoheal = GuiLibrary["ObjectsThatCanBeSaved"]["BlatantWindow"]["Api"].CreateOptionsButton("AutoHeal", function()
	game:GetService("RunService"):BindToRenderStep("AutoHeal", 1, function() 
		if (autohealdelay <= tick()) then
			local plrs = GetAllNearestHumanoidToPosition(60, 100, true)
			for i, v in pairs(plrs) do
				game:GetService("ReplicatedStorage").rbxts_include.node_modules.net.out._NetManaged[bedwars["GuitarRemote"]]:FireServer({
					["healTarget"] = v.Character
				})
			end
			autohealdelay = tick() + 0.5
		end
	end)
end, function() 
	game:GetService("RunService"):UnbindFromRenderStep("AutoHeal") 
end, true, function()
	return ""
end, "AutoHeal players around you (guitar needed)")

GuiLibrary["RemoveObject"]("KillauraOptionsButton")
local killaurarange = {["Value"] = 1}
local killauraangle = {["Value"] = 90}
local killauramouse = {["Enabled"] = false}
local killauracframe = {["Enabled"] = false}
local killauraautoblock = {["Enabled"] = false}
local Killaura = {["Enabled"] = false}
local killauradelay = 0
Killaura = GuiLibrary["ObjectsThatCanBeSaved"]["BlatantWindow"]["Api"].CreateOptionsButton("Killaura", function()
	game:GetService("RunService"):BindToRenderStep("Killaura", 1, function() 
		local targettable = {}
		local targetsize = 0
		if (killauradelay <= tick()) then
			local plr = GetNearestHumanoidToPosition(killaurarange["Value"], false)
			if isAlive() and plr and plr.Character.PrimaryPart and lplr.Character.PrimaryPart and getEquipped()["Type"] == "sword" and (killauramouse["Enabled"] and uis:IsMouseButtonPressed(0) or killauramouse["Enabled"] == false) then
				if killauraautoblock["Enabled"] then
					bedwars["raiseShield"]()
				end
				if killauracframe["Enabled"] then
					lplr.Character:SetPrimaryPartCFrame(CFrame.new(lplr.Character.PrimaryPart.Position, Vector3.new(plr.Character:FindFirstChild("HumanoidRootPart").Position.X, lplr.Character.PrimaryPart.Position.Y, plr.Character:FindFirstChild("HumanoidRootPart").Position.Z)))
				end
				if lplr.Character.Humanoid.SeatPart then
					lplr.Character.Humanoid.SeatPart.CFrame = CFrame.new(lplr.Character.Humanoid.SeatPart.Position, Vector3.new(plr.Character:FindFirstChild("HumanoidRootPart").Position.X, lplr.Character.Humanoid.SeatPart.Position.Y, plr.Character:FindFirstChild("HumanoidRootPart").Position.Z))
				end
				targettable[plr.Name] = {
					["UserId"] = plr.UserId,
					["Health"] = plr.Character.Humanoid.Health,
					["MaxHealth"] = plr.Character.Humanoid.MaxHealth
				}
				targetsize = targetsize + 1
				killauradelay = tick() + 0.1
				bedwars["attackEntity"](bedwars["SwordController"], {["instance"] = plr.Character, ["player"] = plr, ["getInstance"] = function() return plr.Character end})	
			end
			if getEquipped()["Type"] ~= "bow" then
				targetinfo.UpdateInfo(targettable, targetsize)
			end
		end
	end)
end, function() 
	game:GetService("RunService"):UnbindFromRenderStep("Killaura") 
end, true, function()
	return " BedWars"
end, "Attack players around you\nwithout aiming at them.")
killaurarange = Killaura.CreateSlider("Attack range", 1, 25, function(val) end)
killauraangle = Killaura.CreateSlider("Max angle", 1, 360, function(val) end, 90)
killauramouse = Killaura.CreateToggle("Require mouse down", function() end, function() end)
killauracframe = Killaura.CreateToggle("Face target", function() end, function() end)
killauraautoblock = Killaura.CreateToggle("AutoBlock", function() end, function() end)

local bednukerrange = {["Value"] = 1}
local BedNuker = {["Enabled"] = false}
BedNuker = GuiLibrary["ObjectsThatCanBeSaved"]["BlatantWindow"]["Api"].CreateOptionsButton("BedNuker", function()
	spawn(function()
		repeat
			wait(0.2)
			local tab = game.Workspace.Map.Blocks:GetChildren()
			for i = 1, #tab do
				local obj = tab[i]
				if isAlive() then
					if obj.Name == "bed" and (not obj.Name:match(lplr.Team.Name:lower())) and (lplr.Character.HumanoidRootPart.Position - obj.Position).magnitude <= 20 then
						bedwars["breakBlock"](obj.Position)
					end
				end
			end
		until BedNuker["Enabled"] == false
	end)
end, function() end, true)
bednukerrange = BedNuker.CreateSlider("Break range", 1, 20, function(val) end)

local fastbreak = {["Enabled"] = false}
fastbreak = GuiLibrary["ObjectsThatCanBeSaved"]["BlatantWindow"]["Api"].CreateOptionsButton("FastBreak", function()
	spawn(function()
		repeat
			wait()
			local tab = game.Workspace.Map.Blocks:GetChildren()
			for i = 1, #tab do
				local obj = tab[i]
				obj:SetAttribute("Health", 0)
			end
		until fastbreak["Enabled"] == false
	end)
end, function() end, true)

GuiLibrary["RemoveObject"]("SpeedOptionsButton")
local speedval = {["Value"] = 1}
local speedmethod = {["Value"] = "AntiCheat A"}
local speedjump = {["Enabled"] = false}
local bodyvelo

local speed = GuiLibrary["ObjectsThatCanBeSaved"]["BlatantWindow"]["Api"].CreateOptionsButton("Speed", function()
	game:GetService("RunService"):BindToRenderStep("Speed", 1, function(delta)
		if isAlive() then
			if speedmethod["Value"] == "AntiCheat A" then
				if (bodyvelo == nil or bodyvelo ~= nil and bodyvelo.Parent ~= lplr.Character.HumanoidRootPart) then
					bodyvelo = Instance.new("BodyVelocity")
					bodyvelo.Parent = lplr.Character.HumanoidRootPart
					bodyvelo.MaxForce = Vector3.new(100000, 0, 100000)
				else
					bodyvelo.Velocity = lplr.Character.Humanoid.MoveDirection * speedval["Value"]
				end
			elseif speedmethod["Value"] == "AntiCheat B" then
				if (bodyvelo ~= nil) then
					bodyvelo:Remove()
				end
				lplr.Character.HumanoidRootPart.CFrame = lplr.Character.HumanoidRootPart.CFrame + (lplr.Character.Humanoid.MoveDirection * (speedval["Value"] * delta))
			end
			if speedjump["Enabled"] then
				if (lplr.Character.Humanoid:GetState() == Enum.HumanoidStateType.Running or lplr.Character.Humanoid:GetState() == Enum.HumanoidStateType.RunningNoPhysics) and lplr.Character.Humanoid.MoveDirection ~= Vector3.new(0, 0, 0) then
					if speedmethod["Value"] == "AntiCheat A" then
						lplr.Character.HumanoidRootPart.Velocity = Vector3.new(lplr.Character.HumanoidRootPart.Velocity.X, 20, lplr.Character.HumanoidRootPart.Velocity.Z)
					elseif speedmethod["Value"] == "AntiCheat B" then
						lplr.Character.HumanoidRootPart.CFrame = lplr.Character.HumanoidRootPart.CFrame + Vector3.new(0, 0.2, 0)
					end
				end
			end
		end
	end)
end, function() 
	if bodyvelo then
		bodyvelo:Remove()
	end
	game:GetService("RunService"):UnbindFromRenderStep("Speed")
end, true, function() return " "..speedmethod["Value"] end, "Makes you go zoom")
speedmethod = speed.CreateDropdown("Mode", {"AntiCheat A", "AntiCheat B"}, function(val) end)
speedval = speed.CreateSlider("Speed", 1, 30, function(val) end)
speedjump = speed.CreateToggle("AutoJump", function() end, function() end)

local function getziplinepos()
	local tab = game.Workspace:GetChildren()
	local pos2 = Vector3.new(0, 0, 0)
			for i = 1, #tab do
				local obj = tab[i]
				
					if obj.Name:match("zipline") and obj.Name:match("base") and obj:FindFirstChild("ZiplineDestination")  then
						pos2 = obj.Position
					end

			end
			return pos2 / 3
end

GuiLibrary["RemoveObject"]("FlyOptionsButton")
local fly = {["Enabled"] = false}
local flyspeed = {["Value"] = 1}
local flyverticalspeed = {["Value"] = 1}
local flyupanddown = {["Enabled"] = false}
local flybuyballoon = {["Enabled"] = false}
local olddeflate
local flyposy = 0
local flyup = false
local flydown = false
local flypress
local flyendpress

local function buyballoons()
	if isAlive() and fly["Enabled"] then
		if getItem("balloon") == nil and flybuyballoon["Enabled"] then
			game:GetService("ReplicatedStorage").rbxts_include.node_modules.net.out._NetManaged.BedwarsPurchaseItem:InvokeServer({
				["shopItem"] = {
					["currency"] = "emerald",
					["itemType"] = "balloon",
					["amount"] = 3,
					["price"] = 2,
					["limitedTimeItem"] = true
				}
			})
		end
		if getItem("balloon") then
			bedwars["BalloonController"]["inflateBalloon"]()
		end
	end
end

bedwars["Client"]:WaitFor("BalloonPopped"):andThen(function(p6)
	p6:Connect(function(p7)
		buyballoons()
	end)
end)
fly = GuiLibrary["ObjectsThatCanBeSaved"]["BlatantWindow"]["Api"].CreateOptionsButton("Fly", function()
	olddeflate = bedwars["BalloonController"]["deflateBalloon"]
	bedwars["BalloonController"]["deflateBalloon"] = function() end
	if isAlive() then
		flyposy = lplr.Character.HumanoidRootPart.Position.Y
		buyballoons()
	end
	flypress = game:GetService("UserInputService").InputBegan:connect(function(input1)
		if flyupanddown["Enabled"] and game:GetService("UserInputService"):GetFocusedTextBox() == nil then
			if input1.KeyCode == Enum.KeyCode.Space then
				flyup = true
			end
			if input1.KeyCode == Enum.KeyCode.LeftShift then
				flydown = true
			end
		end
	end)
	flyendpress = game:GetService("UserInputService").InputEnded:connect(function(input1)
		if input1.KeyCode == Enum.KeyCode.Space then
			flyup = false
		end
		if input1.KeyCode == Enum.KeyCode.LeftShift then
			flydown = false
		end
	end)
	game:GetService("RunService"):BindToRenderStep("Fly", 1, function(delta) 
		if isAlive() then
			if lplr.Character:GetAttribute("InflatedBalloons") and lplr.Character:GetAttribute("InflatedBalloons") > 0 then
				if flyup then
					flyposy = flyposy + (1 * (math.clamp(flyverticalspeed["Value"] - 16, 1, 150) * delta))
				end
				if flydown then
					flyposy = flyposy - (1 * (math.clamp(flyverticalspeed["Value"] - 16, 1, 150) * delta))
				end
				local flypos = (lplr.Character.Humanoid.MoveDirection * (math.clamp(flyspeed["Value"] - 16, 1, 150) * delta))
				lplr.Character.HumanoidRootPart.Transparency = 1
				lplr.Character.HumanoidRootPart.CFrame = lplr.Character.HumanoidRootPart.CFrame + Vector3.new(flypos.X, (flyposy - lplr.Character.HumanoidRootPart.CFrame.p.Y), flypos.Z)
				lplr.Character.HumanoidRootPart.Velocity = Vector3.new(0, 0, 0)
			end
		end
	end)
end, function() 
	flyup = false
	flydown = false
	flypress:Disconnect()
	flyendpress:Disconnect()
	game:GetService("RunService"):UnbindFromRenderStep("Fly")
	if isAlive() and lplr.Character:GetAttribute("InflatedBalloons") then
		for i = 1, lplr.Character:GetAttribute("InflatedBalloons") do
			olddeflate()
		end
	end
	bedwars["BalloonController"]["deflateBalloon"] = olddeflate
	olddeflate = nil
end, true, function() return " BedWars" end, "Makes you go zoom (Can Automatically Buy) (Balloon Required)")
flyspeed = fly.CreateSlider("Speed", 1, 50, function(val) end)
flyverticalspeed = fly.CreateSlider("Vertical Speed", 1, 50, function(val) end)
flyupanddown = fly.CreateToggle("Y Level", function() end, function() end)
flybuyballoon = fly.CreateToggle("Buy Balloons", function() end, function() end)

local Scaffold = {["Enabled"] = false}
local oldpos = Vector3.new(0, 0, 0)
Scaffold = GuiLibrary["ObjectsThatCanBeSaved"]["BlatantWindow"]["Api"].CreateOptionsButton("Scaffold", function()
	game:GetService("RunService"):BindToRenderStep("Scaffold", 1, function(delta)
		if isAlive() then
			local newpos = getScaffold((lplr.Character.Head.Position + (lplr.Character.Humanoid.MoveDirection * 3.5)) + Vector3.new(0, -6, 0))
			if newpos ~= oldpos then
				local block = scaffoldBlock(newpos)
				oldpos = newpos
			end
		end
	end)
end, function()
	game:GetService("RunService"):UnbindFromRenderStep("Scaffold")
	oldpos = Vector3.new(0, 0, 0)
end, true)

local AutoToxic = {["Enabled"] = false}
local AutoToxicGG = {["Enabled"] = false}
local AutoToxicWin = {["Enabled"] = false}
local AutoToxicFinalKill = {["Enabled"] = false}
local AutoToxicWinStreak = {["Enabled"] = false}
local AutoToxicOldWin = bedwars["VictoryScreen"].render
local victorysaid = false
bedwars["VictoryScreen"].render = function(winstuff)
    local myTeam = bedwars["ClientStore"]:getState().Game.myTeam;
    if myTeam and myTeam.id == winstuff.props.WinningTeamId and AutoToxic["Enabled"] and victorysaid == false then
		victorysaid = true
		if AutoToxicGG["Enabled"] then
			game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer("gg", "All")
		end
		if AutoToxicWin["Enabled"] then
			game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer("EZ L TRASH KIDS : Sponsored by Vˤ̴ape V4 :)", "All")
		end
    end
    return AutoToxicOldWin(winstuff)
end
bedwars["Client"]:WaitFor("EntityDeathEvent"):andThen(function(p6)
	p6:Connect(function(p7)
		if AutoToxic["Enabled"] then
			if p7.fromEntity and p7.fromEntity == game.Players.LocalPlayer.Character then
				local plr = game.Players:GetPlayerFromCharacter(p7.entityInstance)
				if plr and plr.leaderstats.Bed.Value ~= "✅" and AutoToxicFinalKill["Enabled"] then
					game:GetService("ReplicatedStorage").DefaultChatSystemChatEvents.SayMessageRequest:FireServer("L "..(plr.DisplayName or plr.Name)..(AutoToxicWinStreak["Enabled"] and game.Players:GetPlayerFromCharacter(p7.entityInstance):GetAttribute("WinStreak") > 0 and " : "..game.Players:GetPlayerFromCharacter(p7.entityInstance):GetAttribute("WinStreak").." winstreak" or ""), "All")
				end
			end
		end
	end)
end)
AutoToxic = GuiLibrary["ObjectsThatCanBeSaved"]["BlatantWindow"]["Api"].CreateOptionsButton("AutoToxic", function() end, function() end, true)
AutoToxicGG = AutoToxic.CreateToggle("AutoGG", function() end, function() end, true)
AutoToxicWin = AutoToxic.CreateToggle("Win", function() end, function() end, true)
AutoToxicFinalKill = AutoToxic.CreateToggle("Final Kill", function() end, function() end, true)
AutoToxicWinStreak = AutoToxic.CreateToggle("WinStreak", function() end, function() end, false)

--local BuyArrows = {["Enabled"] = false}
--local BowAura = {["Enabled"] = false}
--local bowaurarange = {["Value"] = 50}
--local BowDelay2 = {["Value"] = 5}
--local BowTargets = {["Value"] = 1}
--BowAura = GuiLibrary["ObjectsThatCanBeSaved"]["BlatantWindow"]["Api"].CreateOptionsButton("BowAura", function()
	--spawn(function()
		--repeat
		--	wait(BowDelay2["Value"] / 10)
		--	if isAlive() and getEquipped()["Type"] == "bow" then
			--	local targettable = {}
			--	local targetsize = 0
			--	local plrs = GetAllNearestHumanoidToPosition(bowaurarange["Value"], BowTargets["Value"])
			--	for i,v in pairs(plrs) do
			--		wait(0.03)
			--		local bowpos = bedwars["ProjectilePosition"]()
				--	if isPlayerTargetable(v, true, true) and v.Character and v.Character:FindFirstChild("Head") and vischeck(bowpos, v.Character.Head.Position, {lplr.Character, v.Character}) then
			--			targettable[v.Name] = {
				--			["UserId"] = v.UserId,
				--			["Health"] = v.Character.Humanoid.Health,
				--			["MaxHealth"] = v.Character.Humanoid.MaxHealth
					--	}
					--	targetsize = targetsize + 1
					--	game:GetService("ReplicatedStorage").rbxts_include.node_modules.net.out._NetManaged[bedwars["FireProjectile"]]:InvokeServer(getEquipped()["Object"], bowpos, (bowpos - v.Character.Head.Position))
				--	end
			--	end
			--	targetinfo.UpdateInfo(targettable, targetsize)
		--	end
		--until BowAura["Enabled"] == false
--	end)
--end, function() end, true)
--bowaurarange = BowAura.CreateSlider("Bow Range", 1, 70, function(val) end, 70)
--BowDelay2 = BowAura.CreateSlider("Bow Delay", 1, 20, function(val) end, 5)
--BowTargets = BowAura.CreateSlider("Bow Targets", 1, 20, function(val) end, 1)]]

local OldNoFallFunction
local NoFall = GuiLibrary["ObjectsThatCanBeSaved"]["BlatantWindow"]["Api"].CreateOptionsButton("NoFall", function()
	OldNoFallFunction = bedwars["damageTable"]["requestSelfDamage"]
	bedwars["damageTable"]["requestSelfDamage"] = function() end
end, function()
	bedwars["damageTable"]["requestSelfDamage"] = OldNoFallFunction
end, true, function() return "" end, "Prevents taking fall damage.")